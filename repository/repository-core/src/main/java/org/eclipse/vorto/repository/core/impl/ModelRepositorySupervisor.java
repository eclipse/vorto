package org.eclipse.vorto.repository.core.impl;

import java.util.List;
import java.util.Map;
import org.eclipse.vorto.repository.core.IModelRepository;
import org.eclipse.vorto.repository.core.ModelInfo;
import org.eclipse.vorto.repository.core.events.AppEvent;
import org.eclipse.vorto.repository.core.events.EventType;
import org.eclipse.vorto.repository.domain.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

/**
 * The purpose of this class is to listen to EVENTS generated by other components for which an
 * action should be done on the repository
 * 
 * @author ERM1SGP
 *
 */

@Component
public class ModelRepositorySupervisor implements ApplicationListener<AppEvent> {

  private ModelRepositoryFactory repositoryFactory;

  public ModelRepositorySupervisor(@Autowired ModelRepositoryFactory repositoryFactory) {
    this.repositoryFactory = repositoryFactory;
  }

  @Override
  public void onApplicationEvent(AppEvent event) {
    if (event.getEventType() == EventType.USER_DELETED) {
      String userId = (String) event.getSubject();
      makeModelsAnonymous(userId);
    } else if (event.getEventType() == EventType.TENANT_ADDED) {
      repositoryFactory.updateWorkspaces();
    }
  }

  private void makeModelsAnonymous(String username) {
    Map<String, List<ModelInfo>> userModels =
        repositoryFactory.getModelSearchService().search("author:" + username);

    userModels.forEach((tenantId, models) -> {
      IModelRepository repository = repositoryFactory.getRepository(tenantId);
      for (ModelInfo model : models) {
        model.setAuthor(User.USER_ANONYMOUS);
        repository.updateMeta(model);
      }
    });
  }
}
