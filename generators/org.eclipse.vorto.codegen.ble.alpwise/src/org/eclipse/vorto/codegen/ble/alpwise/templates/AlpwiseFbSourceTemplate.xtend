/*******************************************************************************
 *  Copyright (c) 2017 Oliver Meili
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v1.0 which accompany this distribution.
 *   
 *  The Eclipse Public License is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *  The Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *   
 *  Contributors:
 *  Oliver Meili <omi@ieee.org>
 *******************************************************************************/
package org.eclipse.vorto.codegen.ble.alpwise.templates

import java.io.File
import org.eclipse.vorto.codegen.api.InvocationContext
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel
import java.util.UUID
import com.google.common.base.Strings
import org.eclipse.vorto.codegen.utils.Utils

class AlpwiseFbSourceTemplate extends AlpwiseTemplate<FunctionblockModel> {
	
	UUID uuid
	
	override getFileName(FunctionblockModel fb) {
		return fb.name + ".c";
	}
	
	override getPath(FunctionblockModel fb) {
		return rootPath + File.separator + fb.name;
	}
	
	override getContent(FunctionblockModel fb, InvocationContext context) {
'''
/* «fb.name» generated by Vorto */

#include <stdint.h>
#include <stdio.h>
#include <assert.h>
#include <BleTypes.h>
#include <attserver.h>

#include "BleUtils.h"
#include "BleApp_Cbk.h"

#include "«fb.name».h"

«fb.name»_t «fb.name»_Instances[NUM_«fb.name.toUpperCase»_SERVICES] = {
{
	/* «fb.name» Service UUID: «context.getMappedElement(fb, "Service").getAttributeValue("uuid", "00000000-0000-0000-0000-000000000000")» */
	.uuid = { «convertUuidToByteArray(context.getMappedElement(fb, "Service").getAttributeValue("uuid", "00000000-0000-0000-0000-000000000000"))» },
	.ServiceHandle = { 0 },

	«FOR status : fb.functionblock.status.properties»
		«IF context.getMappedElement(status, "source").hasAttribute("uuid")»
			/* «status.name» characteristic properties */
			/* UUID: «context.getMappedElement(status, "source").getAttributeValue("uuid", "00000000-0000-0000-0000-000000000000")» */
			.«status.name.toFirstUpper» = {
						.uuid = { «convertUuidToByteArray(context.getMappedElement(status, "source").getAttributeValue("uuid", "00000000-0000-0000-0000-000000000000"))» },
						.flags = 0x00 «IF Utils.isReadable(status)» | ATTPROPERTY_READ«ENDIF»«IF Utils.isWritable(status)» | ATTPROPERTY_WRITE«ENDIF»«IF Utils.isEventable(status)» | ATTPROPERTY_NOTIFY«ENDIF» 
			},
			.«status.name.toFirstUpper»Value = { 0xFF },
		«ENDIF»
	«ENDFOR»
}
};

/* FIXME: this is nonsense */
static uint16_t peer = 1;

static BleStatus «fb.name»_RegisterService(«fb.name»_t *«fb.name.toLowerCase»);
static void «fb.name»_ServiceCallback(AttServerCallbackParms* serverCallbackParms);
static void «fb.name»_WriteAndNotifyValue(characteristicProperty_t *ch, uint8_t *value, uint8_t length, uint8_t notify);

void «fb.name»_Init()
{
	int i;

	for (i = 0; i < NUM_«fb.name.toUpperCase»_SERVICES; i++)
	{
		«FOR status : fb.functionblock.status.properties»
			«IF context.getMappedElement(status, "source").hasAttribute("uuid")»
				«fb.name»_Instances[i].«status.name.toFirstUpper».type.size = ATT_UUID_SIZE_128;
				«fb.name»_Instances[i].«status.name.toFirstUpper».type.value.uuid128 = (uint8_t *)&(«fb.name»_Instances[i].«status.name.toFirstUpper».uuid);
			«ENDIF»
		«ENDFOR»
		«fb.name»_RegisterService(&(«fb.name»_Instances[i]));
	}
}

static BleStatus «fb.name»_RegisterService(«fb.name»_t *«fb.name.toLowerCase»)
{
	ATT_SERVER_SecureDatabaseAccess();

	/* Register the service callback for the «fb.name» service */
	if (ATT_SERVER_RegisterServiceAttribute(
		ATTPDU_SIZEOF_128_BIT_UUID, (uint8_t *) «fb.name.toLowerCase»->uuid,
		«fb.name»_ServiceCallback, &(«fb.name.toLowerCase»->ServiceHandle)) == BLESTATUS_FAILED)
	{
		ATT_SERVER_ReleaseDatabaseAccess();
		return BLESTATUS_FAILED;
	}

	«FOR status : fb.functionblock.status.properties»
		«IF context.getMappedElement(status, "source").hasAttribute("uuid")»
			/* Register the «status.name.toFirstUpper» characteristic of the «fb.name» Service */
			if (ATT_SERVER_AddCharacteristic(
				ATTPROPERTY_READ | ATTPROPERTY_NOTIFY,
				(Att16BitCharacteristicAttribute*) &«fb.name.toLowerCase»->«status.name.toFirstUpper».characteristic,
				&«fb.name.toLowerCase»->«status.name.toFirstUpper».type,
				ATT_PERMISSIONS_ALLACCESS,
				(sizeof(«fb.name.toLowerCase»->«status.name.toFirstUpper») / sizeof(uint8_t)),
				(uint8_t *) &«fb.name.toLowerCase»->«status.name.toFirstUpper»Value, 0, 0,
				&«fb.name.toLowerCase»->ServiceHandle,
				&«fb.name.toLowerCase»->«status.name.toFirstUpper».attr) == BLESTATUS_FAILED)
			{
				ATT_SERVER_ReleaseDatabaseAccess();
				return BLESTATUS_FAILED;
			}
		«ENDIF»
	«ENDFOR»

	ATT_SERVER_ReleaseDatabaseAccess();

	return BLESTATUS_SUCCESS;
}

«FOR status : fb.functionblock.status.properties»
	«IF context.getMappedElement(status, "source").hasAttribute("uuid")»
		void «fb.name»_Set«status.name.toFirstUpper»Value(«fb.name»_t *«fb.name.toLowerCase», «context.getMappedElement(status, "source").getAttributeValue("datatype", "uint16")»_t value)
		{
			/* Data conversion based on little endian byte order */
			for (int i = 0; i < «context.getMappedElement(status, "source").getAttributeValue("length", "2")»; i++)
			{
				«fb.name.toLowerCase»->«status.name.toFirstUpper»Value[i] = (uint8_t) (value >> (8*i));
			}
		
			«fb.name»_WriteAndNotifyValue(&«fb.name.toLowerCase»->«status.name.toFirstUpper», «fb.name.toLowerCase»->«status.name.toFirstUpper»Value, «context.getMappedElement(status, "source").getAttributeValue("length", "2")», 1);
		}
	«ENDIF»
«ENDFOR»

static void «fb.name»_ServiceCallback(AttServerCallbackParms* serverCallbackParms)
{
	printf("### «fb.name» Service Callback\n");

	switch (serverCallbackParms->event) {
	case ATTEVT_SERVER_READ_REQ:
		printf("«fb.name» service callback: ");
		serverCallbackParms->status = ATTSTATUS_SUCCESS;
		for (int i = 0; i < NUM_«fb.name.toUpperCase»_SERVICES; i++){
			«FOR status : fb.functionblock.status.properties»
				«IF context.getMappedElement(status, "source").hasAttribute("uuid")»
					if (serverCallbackParms->parms.readReq.attribute
							== &(«fb.name»_Instances[i].«status.name.toFirstUpper».attr)) {
						printf("«status.name.toFirstUpper» characteristic\n");
						«fb.name»_Cbk_«status.name.toFirstUpper»(&«fb.name»_Instances[i]);
					}
				«ENDIF»
			«ENDFOR»
		}
		break;
	default:
		break;
	}
}

static void «fb.name»_WriteAndNotifyValue(characteristicProperty_t *ch, uint8_t *value, uint8_t length, uint8_t notify)
{
	BleStatus status;

	ATT_SERVER_SecureDatabaseAccess();

	status = ATT_SERVER_WriteAttributeValue(&ch->attr, (const uint8_t *)value,
											length);

#if ENABLE_«fb.name.toUpperCase»_NOTIFICATIONS

	if ((notify != 0) && (status == BLESTATUS_SUCCESS)) /* send notification */
	{
		status = ATT_SERVER_SendNotification(&ch->attr, peer);
		printf("«fb.name» notification, x_axis: %d\n", value[0] + 256*value[1]);
		printSendNotificationError(status);
	}
	else
	{
		assert(status != BLESTATUS_FAILED);

	}

#endif

	ATT_SERVER_ReleaseDatabaseAccess();

#if !ENABLE_«fb.name.toUpperCase»_NOTIFICATIONS
	(void) status;
	(void) notify;
#endif
}
'''
	}

	// Result is in reverse order as required by the Alpwise BLE stack
	def String convertUuidToByteArray(String str) {
		var uuid = UUID.fromString(str);
		var result = "";
		if (!Strings.isNullOrEmpty(str)) {
			for (var i = 0; i < 8; i++) {
				result += String.format("0x%02x", new Long((uuid.getLeastSignificantBits() >> (i*8)) % 0x100).byteValue()) + ", ";
			}
			for (var i = 0; i < 8; i++) {
				result += String.format("0x%02x", new Long((uuid.getLeastSignificantBits() >> (i*8)) % 0x100).byteValue());
				if (i < 7) {
					result += ", ";
				}
			}
		}	
		return result;
	}	
}
