/*******************************************************************************
* Copyright (c) 2015 Bosch Software Innovations GmbH and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* and Eclipse Distribution License v1.0 which accompany this distribution.
*
* The Eclipse Public License is available at
* http://www.eclipse.org/legal/epl-v10.html
* The Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
* Contributors:
* Bosch Software Innovations GmbH - Please refer to git log
*******************************************************************************/
grammar org.eclipse.vorto.editor.mapping.Mapping with org.eclipse.xtext.common.Terminals

generate Mapping "http://www.eclipse.org/vorto/metamodel/Mapping"
import "http://www.eclipse.org/vorto/metamodel/InformationModel" as infomodel
import "http://www.eclipse.org/vorto/metamodel/Functionblock" as functionblock
import "http://www.eclipse.org/vorto/metamodel/Datatype" as datatype
import "http://www.eclipse.org/vorto/metamodel/Model" as model

/*----------------------Start Information Model Mapping Definition---------------------------*/
MappingModel:
  InfoModelMapping | FunctionBlockMapping | DataTypeMapping
;

InfoModelMapping:
	{InfoModelMapping}
	'namespace' namespace = QualifiedName
    'version' version = VERSION
     (references += ModelReference)*		
	'infomodelmapping' name=ID  '{'
			(infoModelMappingRules +=InfoModelMappingRule)*
	'}'	
;

InfoModelMappingRule:
	'from' sources+=InfomodelSource (',' sources+=InfomodelSource)*
	'to' target = Target
;
	
/* 
InfoModelSourceElement:
	{InfoModelSourceElement}
	(infomodelSource = InfomodelSource)?
;
*/	
	
InfomodelSource:
	InfoModelAttributeSource | InfoModelPropertySource	
;

InfoModelPropertySource:
	model=[infomodel::InformationModel]  '.' element =[infomodel::FunctionblockProperty]  
;

InfoModelAttributeSource:
	model=[infomodel::InformationModel]  '.' element = InfoModelAttribute 
;


	
enum InfoModelAttribute:  name = 'name' | namespace = 'namespace'  |  version = 'version' | displayname = 'displayname' | category = 'category'  |  description = 'description';

/*----------------------End Information Model Mapping Definition---------------------------*/


/*----------------------Start Function Block Mapping Definition---------------------------*/
FunctionBlockMapping:
	{FunctionBlockMapping}
	'namespace' namespace = QualifiedName
    'version' version = VERSION
     (references += ModelReference)*
	'functionblockmapping' name=ID  '{'
			(functionBlockMappingRules +=FunctionBlockMappingRule)*
	'}'	
;

FunctionBlockMappingRule:
	'from' sources+=FunctionBlockSource (',' sources+=FunctionBlockSource)*
	'to' target = Target;

		
FunctionBlockSource:
	EntityAttributeSource | EntityPropertySource	
;

FunctionBlockPropertySource:
    model = [functionblock::FunctionblockModel] "."  element=[datatype::Property] 
;

FunctionBlockAttributeSource:
	model = [functionblock::FunctionblockModel]  '.' element = FunctionblockModelAttribute
;


ConfigurationResource:
	model = [functionblock::FunctionblockModel] '.'  '.'  'configuration'  '.'  element=[datatype::Property] 
;

StatusResource:
	model = [functionblock::FunctionblockModel] '.' '.'  'status' '.'  element=[datatype::Property] 
;

FaultResource:
	model = [functionblock::FunctionblockModel] '.' '.'  'fault' '.'  element=[datatype::Property] 
;

OperationSource:
	model = [functionblock::FunctionblockModel] '.'  'operation' '.' element=[functionblock::Operation]
;

EventResource:
	 model = [functionblock::FunctionblockModel] '.' 'event' '.' element=[functionblock::Event] ('.' property=[datatype::Property] )?;
	 		
/*
FunctionBlockSourceElement:
	functionblock = [functionblock::FunctionblockModel]  (functionBlockElement = FunctionBlockElement)?
;

FunctionBlockElement:
	FunctionBlockElementAttribute | FunctionBlockChildElement
;

FunctionBlockElementAttribute:
	'.' attribute = FunctionblockModelAttribute 	
;

FunctionBlockChildElement:
	OperationElement | ConfigurationElement | StatusElement | FaultElement | EventElement	
;


OperationElement:
	'.'  'operation' '.' operation=[functionblock::Operation]
;

ConfigurationElement:
	 '.'  'configuration'   typeRef=FBTypeElement
;

StatusElement:
	 '.'  'status'  typeRef=FBTypeElement
;

FaultElement:
	 '.' 'fault' typeRef=FBTypeElement
;

EventElement:
	 '.'  'event' '.' event=[functionblock::Event] (typeRef=FBTypeElement)?;

		 	
FBTypeElement:
	 '.'  property =[datatype::Property] 
;
 */		
enum FunctionblockModelAttribute:  name = 'name' | namespace = 'namespace'  |  version = 'version' | displayname = 'displayname' | category = 'category'  |  description = 'description';

/*----------------------End Function Block Mapping Definition---------------------------*/

/*----------------------Start Entity Mapping Definition---------------------------*/
EntityMapping:
	{EntityMapping}
	'namespace' namespace = QualifiedName
    'version' version = VERSION
     (references += ModelReference)*
	'entitymapping' name=ID  '{'
		(entityMappingRules +=EntityMappingRule)*
	'}'	
;

EntityMappingRule:
	'from' sources+=EntitySource (',' sources+=EntitySource)*
	'to' target=Target;	



EntitySource:
	EntityAttributeSource | EntityPropertySource	
;

EntityPropertySource:
    model = [datatype::Entity] "."  element=[datatype::Property] 
;

EntityAttributeSource:
	model = [datatype::Entity] '.' element = ModelAttribute
;


/*
EntitySourceElement:
	EntityAttributeElement | NestedEntityExpression
;

EntityAttributeElement:
	typeRef = [datatype::Entity] '.' attribute = ModelAttribute
;	

NestedEntityExpression returns EntityExpressionRef:
     EntityExpression ({NestedEntityExpression.ref=current}  "." tail=[datatype::Property])*
;
 
EntityExpression returns EntityExpressionRef:
    {EntityExpression} entity=[datatype::Entity]
; 
 */

/*----------------------End Entity Mapping Definition---------------------------*/

/*----------------------Start Enum Mapping Definition---------------------------*/
EnumMapping:
	{EnumMapping}
	'namespace' namespace = QualifiedName
    'version' version = VERSION
     (references += ModelReference)*
	'enummapping' name=ID  '{'
		(enumMappingRules +=EnumMappingRule)*
	'}'	
;

EnumMappingRule:
	'from' sources+=EnumSource (',' sources+=EnumSource)*
	'to' target=Target
;


EnumSource:
	EnumAttributeSource | EnumPropertySource	
;

EnumPropertySource:
    model = [datatype::Enum] "."  element=[datatype::EnumLiteral] 
;

EnumAttributeSource:
	model = [datatype::Enum] '.' element = ModelAttribute
;


/*
EnumSourceElement:
	EnumAttributeElement | EnumExpression
;


EnumAttributeElement:
	typeRef = [datatype::Enum] '.' attribute = ModelAttribute
;	


EnumExpression:
   typeRef = [datatype::Enum] "." literal=[datatype::EnumLiteral]
;

EnumReference:
	'reference' reference=  [EnumMapping|QualifiedName]	
;
 */	
/*----------------------End Enum Mapping Definition---------------------------*/


/*----------------------Start Reference Element Definition---------------------------*/
FunctionBlockReference:
	'reference' reference=  [FunctionBlockMapping|QualifiedName]
;


DataTypeMapping:
	EntityMapping | EnumMapping
;

/*----------------------End Reference Element Definition---------------------------*/	

/*----------------------Start Rule Source Definition---------------------------*/


/*----------------------End Rule Source Definition---------------------------*/	
	
/*----------------------Start Target Element Definition---------------------------*/
Target:
	StereoTypeTarget | ReferenceTarget
;

ReferenceTarget:
	'reference' mappingModel = [MappingModel|QualifiedName]
;	



StereoTypeTarget:
	 name=ID ('with {' attributes+=Attribute (',' attributes+=Attribute)* '}')?;

Attribute:
	name=ID ':' value=STRING;

/*----------------------End Target Element Definition---------------------------*/

enum ModelAttribute: name = 'name' | namespace = 'namespace'  |  version = 'version';
	
QualifiedName:
	ID ('.' ID)*
;

terminal VERSION : ('0'..'9')* '.' ('0'..'9')* '.' ('0'..'9')*('-'ID)?;

ModelReference returns model::ModelReference: 
	'using' importedNamespace=QualifiedName';'version=VERSION
;