/*******************************************************************************
* Copyright (c) 2015 Bosch Software Innovations GmbH and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* and Eclipse Distribution License v1.0 which accompany this distribution.
*
* The Eclipse Public License is available at
* http://www.eclipse.org/legal/epl-v10.html
* The Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
* Contributors:
* Bosch Software Innovations GmbH - Please refer to git log
*******************************************************************************/
grammar org.eclipse.vorto.editor.mapping.Mapping with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/vorto/metamodel/Mapping"
import "http://www.eclipse.org/vorto/metamodel/InformationModel" as infomodel
import "http://www.eclipse.org/vorto/metamodel/Functionblock" as functionblock
import "http://www.eclipse.org/vorto/metamodel/Datatype" as datatype
import "http://www.eclipse.org/vorto/metamodel/Model" as model

MappingModel:
	{MappingModel}
	'namespace' namespace = QualifiedName
    'version' version = VERSION
     (references += ModelReference)*	
	 mapping = Mapping
;

Mapping:
	InfoModelMapping | FunctionBlockMapping | DataTypeMapping
;

/*----------------------Start Information Model Mapping Definition---------------------------*/
InfoModelMapping:
	'infomodelmapping' name=ID  '{'
			(infoModelMappingRules +=InfoModelMappingRule)*
	'}'	
;

InfoModelMappingRule:
	'from' sourceElements+=InfoModelSourceElement (',' infoModelSourceElements+=InfoModelSourceElement)*
	'to' target = InfoModelTargetElement
;

InfoModelTargetElement:
	StereoTypeReference | FunctionBlockReference
;
	
InfoModelSourceElement:
	infoModel=[infomodel::InformationModel]  (infoModelChild = InfoModelChild)?
;

InfoModelChild:
	InfoModelFbElement|InformationModelAttribute
;

InfoModelFbElement:
	'.' functionblock =[infomodel::FunctionblockProperty]  
;


InformationModelAttribute:
	'.' attribute = InfoModelAttribute 
;

enum InfoModelAttribute:  name = 'name' | namespace = 'namespace'  |  version = 'version' | displayname = 'displayname' | category = 'category'  |  description = 'description';

/*----------------------End Information Model Mapping Definition---------------------------*/


/*----------------------Start Function Block Mapping Definition---------------------------*/
FunctionBlockMapping:
	'functionblockmapping' name=ID  '{'
			(functionBlockMappingRules +=FunctionBlockMappingRule)*
	'}'	
;

FunctionBlockMappingRule:
	'from' functionBlockSourceElements+=FunctionBlockSourceElement (',' functionBlockSourceElements+=FunctionBlockSourceElement)*
	'to' target = FunctionBlockTargetElement;

FunctionBlockTargetElement:
	StereoTypeReference | DataTypeReference
;
		
FunctionBlockSourceElement:
	functionblock = [functionblock::FunctionblockModel]  (functionBlockElement = FunctionBlockElement)?
;

FunctionBlockElement:
	FunctionBlockElementAttribute | FunctionBlockChildElement
;

FunctionBlockElementAttribute:
	'.' attribute = FunctionblockModelAttribute 	
;

FunctionBlockChildElement:
	OperationElement | ConfigurationElement | StatusElement | FaultElement | EventElement	
;


OperationElement:
	'.'  'operation' '.' operation=[functionblock::Operation]
;

ConfigurationElement:
	 '.'  'configuration'   typeRef=FBTypeElement
;

StatusElement:
	 '.'  'status'  typeRef=FBTypeElement
;

FaultElement:
	 '.' 'fault' typeRef=FBTypeElement
;

EventElement:
	 '.'  'event' '.' event=[functionblock::Event] (typeRef=FBTypeElement)?;

		 	
FBTypeElement:
	 '.'  property =[datatype::Property] 
;

enum FunctionblockModelAttribute:  name = 'name' | namespace = 'namespace'  |  version = 'version' | displayname = 'displayname' | category = 'category'  |  description = 'description';

/*----------------------End Function Block Mapping Definition---------------------------*/

/*----------------------Start Entity Mapping Definition---------------------------*/
EntityMapping:
	'entitymapping' name=ID  '{'
		(entityMappingRules +=EntityMappingRule)*
	'}'	
;

EntityMappingRule:
	'from' entityMappingElements+=EntitySourceElement (',' EntitySourceElement+=EntitySourceElement)*
	'to' target=EntityTargetElement;	

EntityTargetElement:
	StereoTypeReference | DataTypeReference
;

EntitySourceElement:
	EntityAttributeElement | NestedEntityExpression
;

EntityAttributeElement:
	typeRef = [datatype::Entity] '.' attribute = ModelAttribute
;	

NestedEntityExpression returns EntityExpressionRef:
     EntityExpression ({NestedEntityExpression.ref=current}  "." tail=[datatype::Property])*
;
 
EntityExpression returns EntityExpressionRef:
    {EntityExpression} entity=[datatype::Entity]
; 


/*----------------------End Entity Mapping Definition---------------------------*/

/*----------------------Start Enum Mapping Definition---------------------------*/
EnumMapping:
	'enummapping' name=ID  '{'
		(enumMappingRules +=EnumMappingRule)*
	'}'	
;

EnumMappingRule:
	'from' enumElements+=EnumSourceElement (',' EnumSourceElement+=EnumSourceElement)*
	'to' target=EnumTargetElement
;	

EnumTargetElement:
	StereoTypeReference | EnumReference
;

	
EnumSourceElement:
	EnumAttributeElement | EnumExpression
;


EnumAttributeElement:
	typeRef = [datatype::Enum] '.' attribute = ModelAttribute
;	


EnumExpression:
   typeRef = [datatype::Enum] "." literal=[datatype::EnumLiteral]
;

EnumReference:
	'reference' reference=  [EnumMapping|QualifiedName]	
;

/*----------------------End Enum Mapping Definition---------------------------*/


/*----------------------Start Reference Element Definition---------------------------*/
FunctionBlockReference:
	'reference' reference=  [FunctionBlockMapping|QualifiedName]
;

DataTypeReference:
	'reference' reference = [DataTypeMapping|QualifiedName] 
;

DataTypeMapping:
	EntityMapping | EnumMapping
;

/*----------------------End Reference Element Definition---------------------------*/	
	
	
/*----------------------Start Target Element Definition---------------------------*/
StereoTypeReference:
	targetElement=StereoTypeElement
;

StereoTypeElement:
	stereoTypes+=StereoType (',' stereoTypes+=StereoType)*;

StereoType:
	name=ID ('with {' attributes+=Attribute (',' attributes+=Attribute)* '}')?;

Attribute:
	name=ID ':' value=STRING;

/*----------------------End Target Element Definition---------------------------*/

enum ModelAttribute: name = 'name' | namespace = 'namespace'  |  description = 'description';
	
QualifiedName:
	ID ('.' ID)*
;

terminal VERSION : ('0'..'9')* '.' ('0'..'9')* '.' ('0'..'9')*('-'ID)?;

ModelReference returns model::ModelReference: 
	'using' importedNamespace=QualifiedName';'version=VERSION
;