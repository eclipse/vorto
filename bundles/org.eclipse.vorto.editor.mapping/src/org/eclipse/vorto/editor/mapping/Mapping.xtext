/*******************************************************************************
* Copyright (c) 2015 Bosch Software Innovations GmbH and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* and Eclipse Distribution License v1.0 which accompany this distribution.
*
* The Eclipse Public License is available at
* http://www.eclipse.org/legal/epl-v10.html
* The Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
* Contributors:
* Bosch Software Innovations GmbH - Please refer to git log
*******************************************************************************/
grammar org.eclipse.vorto.editor.mapping.Mapping with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/vorto/metamodel/Mapping"
import "http://www.eclipse.org/vorto/metamodel/InformationModel" as infomodel
import "http://www.eclipse.org/vorto/metamodel/Functionblock" as functionblock
import "http://www.eclipse.org/vorto/metamodel/Datatype" as datatype
import "http://www.eclipse.org/vorto/metamodel/Model" as model

MappingModel:
	{MappingModel}
	'namespace' namespace = QualifiedName
    'version' version = VERSION
     (references += ModelReference)*	
	'mapping' name=ID  '{'
		
		(infoModelMappingRules+=InfoModelMappingRule)*
		
		(
		'functionblock' '{'
			(functionBlockMappingRules +=FunctionBlockMappingRule)*
		'}'
		)?
		
		(
		'datatype' '{'
			(dataTypeMappingRules +=DataTypeMappingRule)*
		'}'
		)?		
	'}';


/*----------------------Start Information Model Mapping Definition---------------------------*/
InfoModelMappingRule:
	'from' infoModelSourceElements+=InfoModelSourceElement (',' infoModelSourceElements+=InfoModelSourceElement)*
	'to' targetElement=TargetElement;
 	
InfoModelSourceElement:
	infoModel=[infomodel::InformationModel]  (infoModelChild = InfoModelChild)?
;

InfoModelChild:
	InfoModelFbElement|InformationModelProperty
;

InfoModelFbElement:
	'.' functionblock =[infomodel::FunctionblockProperty]   (functionBlockElement = 	FunctionBlockElement)?
;


InformationModelProperty:
	'.' attribute = InfoModelAttribute 
;

enum InfoModelAttribute:  name = 'name' | namespace = 'namespace'  |  version = 'version' | displayname = 'displayname' | category = 'category'  |  description = 'description';

/*----------------------End Information Model Mapping Definition---------------------------*/


/*----------------------Start Function Block Mapping Definition---------------------------*/
FunctionBlockMappingRule:
	'from' functionBlockSourceElements+=FunctionBlockSourceElement (',' functionBlockSourceElements+=FunctionBlockSourceElement)*
	'to' targetElement=TargetElement;
		
FunctionBlockSourceElement:
	functionblock = [functionblock::FunctionblockModel]  (functionBlockElement = FunctionBlockElement)?
;

FunctionBlockElement:
	FunctionBlockElementAttribute | FunctionBlockChildElement
;

FunctionBlockElementAttribute:
	'.' attribute = FunctionblockModelAttribute 	
;

FunctionBlockChildElement:
	type = OperationElement | ConfigurationElement | StatusElement | FaultElement | EventElement	
;


OperationElement:
	'.'  'operation' '.' operation=[functionblock::Operation]
;

ConfigurationElement:
	 '.'  'configuration'   typeRef=FBTypeElement
;

StatusElement:
	 '.'  'status'  typeRef=FBTypeElement
;

FaultElement:
	 '.' 'fault' typeRef=FBTypeElement
;

EventElement:
	 '.'  'event' '.' event=[functionblock::Event] (typeRef=FBTypeElement)?;

		 	
FBTypeElement:
	 '.'  property =[datatype::Property] (child=FBTypeElementChild)? 
;

FBTypeElementChild:
	DataTypeAttribute | FBTypeProperty
;

FBTypeProperty:
	'.'  property=[datatype::Property]
;

enum FunctionblockModelAttribute:  name = 'name' | namespace = 'namespace'  |  version = 'version' | displayname = 'displayname' | category = 'category'  |  description = 'description';

/*----------------------End Function Block Mapping Definition---------------------------*/

/*----------------------Start Entity Mapping Definition---------------------------*/
DataTypeMappingRule:
	'from' dataTypeMappingElements+=DataTypeSourceElement (',' DataTypeSourceElement+=DataTypeSourceElement)*
	'to' targetElement=TargetElement;	

DataTypeSourceElement:
	DataTypePropertyElement | NestedEntityExpression
;

DataTypePropertyElement:
	typeRef = [datatype::Type] attribute = DataTypeAttribute
;	

NestedEntityExpression returns EntityExpressionRef:
     EntityExpression ({NestedEntityExpression.ref=current}  "." tail=[datatype::Property])*
;
 
EntityExpression returns EntityExpressionRef:
    {EntityExpression} entity=[datatype::Type]
; 

DataTypeAttribute:
	'.' attribute = ModelAttribute 	
;

/*----------------------End Entity Mapping Definition---------------------------*/

/*----------------------Start Target Element Definition---------------------------*/
TargetElement:
	stereoTypes+=StereoType (',' stereoTypes+=StereoType)*;

StereoType:
	name=ID ('with {' attributes+=Attribute (',' attributes+=Attribute)* '}')?;

Attribute:
	name=ID ':' value=STRING;

/*----------------------End Target Element Definition---------------------------*/

enum ModelAttribute: name = 'name' | namespace = 'namespace'  |  description = 'version';
	
QualifiedName:
	ID ('.' ID)*
;

terminal VERSION : ('0'..'9')* '.' ('0'..'9')* '.' ('0'..'9')*('-'ID)?;

ModelReference returns model::ModelReference: 
	'using' importedNamespace=QualifiedName';'version=VERSION
;