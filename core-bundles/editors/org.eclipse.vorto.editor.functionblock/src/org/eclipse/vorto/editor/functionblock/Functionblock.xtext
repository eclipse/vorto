/*******************************************************************************
 * Copyright (c) 2014 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 *
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 *
 *******************************************************************************/
 
grammar org.eclipse.vorto.editor.functionblock.Functionblock with org.eclipse.vorto.editor.datatype.Datatype

import "http://www.eclipse.org/vorto/metamodel/Datatype" as datatype
import "http://www.eclipse.org/vorto/metamodel/Functionblock"
import "http://www.eclipse.org/vorto/metamodel/Model" as model 

FunctionblockModel:
	{FunctionblockModel}
	'namespace' namespace = QualifiedName
    'version' version = VERSION
    'displayname' displayname=STRING      
    ('description' description=STRING)? 
    ('category' category=CATEGORY)?   
     (references += ModelReference)*	
	'functionblock' name= ID ('extends' superType = [FunctionblockModel | QualifiedName])? '{'
		functionblock = FunctionBlock
	'}'	
	(entities += Entity)*
	(enums+=Enum)*
;

FunctionBlock:
	{FunctionBlock}	
	(configuration = Configuration)?	
	(status = Status)?	
	(fault = Fault)?
	
	('events' '{'
		(events += Event)*
	'}')?
	
	('operations' '{'
		(operations += Operation)*
	'}')?		
;

Configuration:
	{Configuration}
	'configuration' '{' 
		(properties += Property)*
	'}'
;

Status:
	{Status}
	'status' '{' 
		(properties += Property)*
	'}'
;

Fault:
	{Fault}
	'fault' '{' 
		(properties += Property)*
	'}'
;
 
Operation :
	 (extension ?= 'extension')? (presence = Presence)? (breakable ?= 'breakable')? name=ID '(' (params += Param (',' params+=Param)*)?')' ('returns'  returnType = ReturnType)? (description=STRING)?
;

ReturnType :
	ReturnDictonaryType | ReturnObjectType | ReturnPrimitiveType
;

ReturnDictonaryType :
	 (multiplicity ?= 'multiple')? returnType = DictionaryPropertyType ('<' constraintRule = ConstraintRule '>')?
;

ReturnObjectType :
	 (multiplicity ?= 'multiple')? returnType = [datatype::Type | QualifiedName] ('<' constraintRule = ConstraintRule '>')?
;

ReturnPrimitiveType :
	 (multiplicity ?= 'multiple')? returnType = PrimitiveType ('<' constraintRule = ConstraintRule '>')?
;

DictonaryParam:
	(multiplicity ?= 'multiple')? name = ID 'as' type = DictionaryPropertyType ('<' constraintRule = ConstraintRule '>')?  (description=STRING)?
;

PrimitiveParam:
	(multiplicity ?= 'multiple')? name = ID 'as' type = PrimitiveType ('<' constraintRule = ConstraintRule '>')?  (description=STRING)?
;

RefParam:
	(multiplicity ?= 'multiple')? name = ID 'as' type = [datatype::Type|QualifiedName] (description=STRING)?
;

Param:
    DictonaryParam | PrimitiveParam | RefParam
;
 
Event:
	 name = ID '{'
		(properties += Property)*
	'}'
;

CATEGORY : ID ('/' ID)*;
