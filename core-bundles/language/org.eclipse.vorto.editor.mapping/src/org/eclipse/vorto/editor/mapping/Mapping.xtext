/*******************************************************************************
* Copyright (c) 2015 Bosch Software Innovations GmbH and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* and Eclipse Distribution License v1.0 which accompany this distribution.
*
* The Eclipse Public License is available at
* http://www.eclipse.org/legal/epl-v10.html
* The Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
* Contributors:
* Bosch Software Innovations GmbH - Please refer to git log
*******************************************************************************/
grammar org.eclipse.vorto.editor.mapping.Mapping with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/vorto/metamodel/Mapping"
import "http://www.eclipse.org/vorto/metamodel/InformationModel" as infomodel
import "http://www.eclipse.org/vorto/metamodel/Functionblock" as functionblock
import "http://www.eclipse.org/vorto/metamodel/Datatype" as datatype
import "http://www.eclipse.org/vorto/metamodel/Model" as model

MappingModel:
  InfoModelMappingModel | FunctionBlockMappingModel | DataTypeMappingModel
;

DataTypeMappingModel:
	EntityMappingModel | EnumMappingModel	
;

/*----------------------Start Information Model Mapping Definition---------------------------*/
InfoModelMappingModel:
	{InfoModelMappingModel}
	('vortolang' lang=VortoLangVersion)?
	'namespace' namespace = QualifiedName
    'version' version = VERSION
    ('displayname' displayname=STRING)?      
    ('description' description=STRING)? 
    ('category' category=CATEGORY)?   
     (references += ModelReference)*		
	'infomodelmapping' name=ID  '{'
			'targetplatform' targetPlatform = ID
			(rules +=InfoModelMappingRule)*
	'}'	
;

InfoModelMappingRule:
	'from' sources+=InfomodelSource (',' sources+=InfomodelSource)*
	'to' target = Target
;
		
InfomodelSource:
	InfoModelAttributeSource | InfoModelPropertySource	
;

InfoModelPropertySource:
	model=[infomodel::InformationModel]  '.' 'functionblocks' '.' property =[infomodel::FunctionblockProperty]
;

InfoModelAttributeSource:
	model=[infomodel::InformationModel]  ('.' attribute = ModelAttribute)?
;

/*----------------------End Information Model Mapping Definition---------------------------*/


/*----------------------Start Function Block Mapping Definition---------------------------*/
FunctionBlockMappingModel:
	{FunctionBlockMappingModel}
	('vortolang' lang=VortoLangVersion)?
	'namespace' namespace = QualifiedName
    'version' version = VERSION
    ('displayname' displayname=STRING)?      
    ('description' description=STRING)? 
    ('category' category=CATEGORY)?    
     (references += ModelReference)*
	'functionblockmapping' name=ID  '{'
			'targetplatform' targetPlatform = ID	
			(rules +=FunctionBlockMappingRule)*
	'}'	
;

enum VortoLangVersion returns model::VortoLangVersion:
	version1 = '1.0'
;

ModelReference returns model::ModelReference:
	'using' importedNamespace = QualifiedName';'version = VERSION
;

FunctionBlockMappingRule:
	'from' sources+=FunctionBlockSource (',' sources+=FunctionBlockSource)*
	'to' target = Target;

		
FunctionBlockSource:
	FunctionBlockAttributeSource | FunctionBlockPropertySource	|OperationSource |EventSource
;

FunctionBlockPropertySource:
    ConfigurationSource | StatusSource | FaultSource 
;

FunctionBlockAttributeSource:
	model = [functionblock::FunctionblockModel]  ('.' attribute = ModelAttribute)?
;


ConfigurationSource:
	model = [functionblock::FunctionblockModel] '.'   'configuration'  '.'  property=[datatype::Property] 
;

StatusSource:
	model = [functionblock::FunctionblockModel] '.' 'status' '.'  property=[datatype::Property] 
;

FaultSource:
	model = [functionblock::FunctionblockModel] '.'  'fault' '.'  property=[datatype::Property] 
;

OperationSource:
	model = [functionblock::FunctionblockModel] '.'  'operation' '.' operation=[functionblock::Operation] ('.' 'params' '.' + param=[functionblock::Param])?
;

EventSource:
	 model = [functionblock::FunctionblockModel] '.' 'event' '.' event=[functionblock::Event] ('.' eventProperty=[datatype::Property] )?;


/*----------------------End Function Block Mapping Definition---------------------------*/

/*----------------------Start Entity Mapping Definition---------------------------*/
EntityMappingModel:
	{EntityMappingModel}
	('vortolang' lang=VortoLangVersion)?
	'namespace' namespace = QualifiedName
    'version' version = VERSION
    ('displayname' displayname=STRING)?      
    ('description' description=STRING)? 
    ('category' category=CATEGORY)?     
     (references += ModelReference)*
	'entitymapping' name=ID  '{'
		'targetplatform' targetPlatform = ID	
		(rules +=EntityMappingRule)*
	'}'	
;

EntityMappingRule:
	'from' sources+=EntitySource (',' sources+=EntitySource)*
	'to' target=Target;	



EntitySource:
	EntityAttributeSource | EntityPropertySource	
;

EntityPropertySource:
    model = [datatype::Entity] "."  property=[datatype::Property] 
;

EntityAttributeSource:
	model = [datatype::Entity] ('.' attribute = ModelAttribute)?
;

/*----------------------End Entity Mapping Definition---------------------------*/

/*----------------------Start Enum Mapping Definition---------------------------*/
EnumMappingModel:
	{EnumMappingModel}
	('vortolang' lang=VortoLangVersion)?
	'namespace' namespace = QualifiedName
    'version' version = VERSION
    ('displayname' displayname=STRING)?      
    ('description' description=STRING)? 
    ('category' category=CATEGORY)?   
     (references += ModelReference)*
	'enummapping' name=ID  '{'
		'targetplatform' targetPlatform = ID	
		(rules +=EnumMappingRule)*
	'}'	
;

EnumMappingRule:
	'from' sources+=EnumSource (',' sources+=EnumSource)*
	'to' target=Target
;


EnumSource:
	EnumAttributeSource | EnumPropertySource	
;

EnumPropertySource:
    model = [datatype::Enum] "."  property=[datatype::EnumLiteral] 
;

EnumAttributeSource:
	model = [datatype::Enum] ('.' attribute = ModelAttribute)?
;

/*----------------------End Enum Mapping Definition---------------------------*/
	
/*----------------------Start Target Element Definition---------------------------*/
Target:
	StereoTypeTarget | ReferenceTarget
;

ReferenceTarget:
	'reference' mappingModel = [MappingModel]
;	

StereoTypeTarget:
	 name=ID ('with' '{' attributes+=Attribute (',' attributes+=Attribute)* '}')?;

Attribute:
	name=ID ':' value=STRING;
	
QualifiedName:
	ID ('.' ID)*
;

terminal VERSION : ('0'..'9')* '.' ('0'..'9')* '.' ('0'..'9')*('-'ID)?;

CATEGORY: ID ('/' ID)*;

/*----------------------End Target Element Definition---------------------------*/

enum ModelAttribute: name = 'name' | namespace = 'namespace'  |  version = 'version' | displayname = 'displayname' | category = 'category'  |  description = 'description';