#
# Copyright (c) 2020 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# https://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#

openapi: 3.0.0
info:
  title: Eclipse Vorto Repository API
  description: |- 
    The Eclipse Vorto Repository API allows you to interact with models managed by the Repository.
  contact:
    name: Eclipse Vorto Team
    url: https://www.eclipse.org/vorto
    email: vorto-development@bosch-si.com
  version: '1.0'
  
servers:
- url: https://vorto.eclipse.org/api/v1
  description: Eclipse Vorto Repository
  
tags:
  - name: Models
    description: Explore models
  - name: Generators
    description: Generic API for generating code from models
  - name: Plugins
    description: Invoke official generator plugins
  - name: Attachments
    description: Explore attachments of models, such as images etc.
  - name: Importers
    description: Import models to be managed in the Repository
  - name: Namespaces
    description: Manage namespaces and collaborators
    
security:
  - BearerAuth: []
    
paths:
  '/namespaces':
    get:
      tags: 
      - Namespaces
      summary: Get all namespaces where the current user is a collaborator
      description: "A list of all namespaces for which the user is a collaborator."
      responses:
        200:
          description: 'Successful response with list of all namespaces'
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Namespace'
        400:
          description: 'Request is invalid'
  '/namespaces/{namespace}':
    get:
      tags: 
      - Namespaces
      summary: Get namespace information for which the current user is a collaborator
      description: "All information pertaining to the namespace."
      parameters:
        - name: namespace
          in: path
          description: namespace
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: 'Successful response information for namespace'
          headers: {}
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Namespace'
        403:
          description: 'User is not a namespace collaborator'
        400:
          description: 'Request is invalid'
  '/namespaces/{namespace}/collaborators/{userId}':
    put:
      tags:
      - Namespaces
      summary: Update/Add a collaborator in the namespace
      description: "Update or add a collaborator in the namespace."
      parameters:
        - name: namespace
          in: path
          description: namespace
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: path
          description: userId
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: 'Collaborator information'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collaborator'
      responses:
        200:
          description: 'Updating of collaborator successful'
        403:
          description: 'User is not a namespace administrator'
        400:
          description: 'Request is invalid'
  '/importers':
    get:
      tags: 
      - Importers
      summary: A list of all supported importers
      description: "A list of all supported importer plugins."
      responses:
        200:
          description: 'Successful response with supported importer data'
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImporterInfo'
    post:
      tags: 
      - Importers
      summary: Upload and validates Vorto Models or other supported device description files.
      description: "Upload and validates Vorto Models or other supported device description files. If validation was successful, a upload handle is returned, that is needed to perform the actual check-in. You need to have 'CREATOR' permission to import models."
      parameters: 
      - name: targetNamespace
        in: query
        description: Target namespace of the models to be imported
        required: true
        schema:
          type: string
      - name: key
        in: query
        description: Key of the importer plugin
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: single model file or ZIP containing the models
                  format: binary
      responses:
        200:
          description: 'Successful response of UploadResult'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResult'
    put:
      tags: 
      - Importers
      summary: Performs the actual check in of the model(s) to the Repository
      description: "Performs the actual import of the model(s) to the Repository. Once imported, they are saved and managed in DRAFT state. You need to have 'CREATOR' permission to import model."
      parameters: 
      - name: targetNamespace
        in: query
        description: Target namespace of the models to be imported
        required: true
        style: form
        schema:
          type: string
      - name: key
        in: query
        description: Key of the importer plugin
        required: true
        schema:
          type: string
      - name: handleId
        in: path
        description: Upload Handle ID that refers to a previous upload
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelInfo'
  '/search/models':
    get:
      tags:
      - Models
      summary: Search for models
      description: "This resource can be used to search for models. It allows free-text and tagged search using the model's attributes, e.g. *Display name*, *Name* or *Description*. These values can be set using the Model Editor in the Model Details page, e.g. if there are models with names: *Light* and *Lightbulb*, searching with keyword *name:light** will fetch both. If you want to include unpublished or private models in search, you must login. The search syntax is described [here](https://github.com/eclipse/vorto/tree/master/repository/repository-elasticsearch/Readme.md)"
      operationId: SearchForModels
      parameters:
      - name: expression
        in: query
        description: Free-text search expression,example-"*name:light**"
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: Successful retrieval of search result
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelInfo'
                description: Successful retrieval of search result
        400:
          description: The request could not be completed, invalid search expression.
      deprecated: false

  '/generators/{serviceKey}':
    get:
      tags:
      - Generators
      summary: Retrieve information for a specific generator
      description: Returns information corresponding to a specific generator identified using its 'servicekey'.
      operationId: RetrieveInformationForASpecificGenerator
      parameters:
      - name: serviceKey
        in: path
        description: ServiceKey of the generator
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratorInfo'
      deprecated: false

  '/generators':
    get:
      tags:
      - Generators
      summary: List all registered generators
      description: Returns a list of all generators registered with the Vorto Repository.  The generators are grouped under 'production', 'infra' and 'demo' tags.
      parameters:
      - name: orderBy
        in: query
        description: Order results using the tag of your choice
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/orderBy'
      responses:
        200:
          description: Retrieved generators successfully
          headers: {}
          content:
            text/plain:
              schema:
                type: object
                description: Retrieved generators successfully
      deprecated: false

  '/models/{modelId}':
    get:
      tags:
      - Models
      summary: Retrieve the meta-info of a model
      description: Returns the meta information of the model using its `modelId`.  If you want to search unpublished or private models, you must login.
      parameters:
      - name: modelId
        in: path
        description: The identifier of vorto model, e.g. com.bosch.bcds:XDK:2.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successful retrieval of model info
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelInfo'
        400:
          description: The request could not be completed, invalid input.
        401:
          description: The request could not be completed, invalid authentication.
        403:
          description: The request could not be completed, unauthorized.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false

  '/models/{modelId}/content':
    get:
      tags:
      - Models
      summary: Retrieve model content
      description: Returns the complete model content including all resolved references for a given `modelId`.  If you want to retrieve an unpublished or private model, you must login.
      operationId: RetrieveModelContent
      parameters:
      - name: modelId
        in: path
        description: The identifier of Vorto model, e.g. com.bosch.bcds:XDK:2.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successful retrieval of model content
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelContent'
        400:
          description: The request could not be completed, invalid input.
        401:
          description: The request could not be completed, invalid authentication.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/generators/{serviceKey}/models/{modelId}':

    get:
      tags:
      - Generators
      summary: Invoke generator for a model
      description: Invoke a generator for a specific model using the `service key` and `modelId`.
      operationId: InvokeGeneratorForAModel
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: serviceKey
        in: path
        description: ServiceKey of the generator
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Code was successfully generated.
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/openapi/models/{modelId}':
    get:
      tags:
      - Plugins
      summary: Creates OpenAPI Specification
      description: Generates an OpenAPI V3 specification for the given `modelId`.
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: digitaltwin
        in: query
        required: true
        description: The target Digital Twin Service for the OpenAPI Spec
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/digitaltwin'
      responses:
        200:
          description: Code was successfully generated.
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/openapi':
    get:
      tags:
      - Plugins
      summary: Meta-Information about plugin
      description: Gives meta - information about the plugin.
      responses:
        200:
          description: Successful retrieval of Plugin information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratorInfo'
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/boschiotsuite/models/{modelId}/connectivity':
    get:
      tags:
      - Plugins
      summary: Connect device via MQTT
      description: Generates code to connect the device for the `modelId` to Bosch IoT Suite via MQTT.
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: language
        in: query
        required: true
        description: Language of the source code
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/language'
      responses:
        200:
          description: Code was successfully generated.
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/boschiotsuite/models/{modelId}/provision':
    get:
      tags:
      - Plugins
      summary: Provision the device
      description: Generates a script to provision the device for `modelId` in the Bosch IoT Suite.
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Code was successfully generated.
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/boschiotsuite':
    get:
      tags:
      - Plugins
      summary: Meta-Information about plugin
      description: Gives meta - information about the plugin.
      responses:
        200:
          description: Successful retrieval of Plugin information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratorInfo'
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/eclipsehono/models/{modelId}/connectivity':
    get:
      tags:
      - Plugins
      summary: Connect device to Hono MQTT Adapter
      description: Generates code to connect the device for the `modelId` to Eclipse Hono MQTT Adapter.
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: language
        in: query
        required: true
        description: Language of the source code
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/language'
      responses:
        200:
          description: Code was successfully generated.
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/eclipsehono':
    get:
      tags:
      - Plugins
      summary: Meta-Information about plugin
      description: Gives meta - information about the plugin.
      responses:
        200:
          description: Successful retrieval of Plugin information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratorInfo'
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/eclipseditto/models/{modelId}':
    get:
      tags:
      - Plugins
      summary: Eclipse Ditto JSON Schema
      description: Generates JSON-schema for the given `modelId` compliant for Eclipse Ditto.
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.mycompany:Car:1.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Code was successfully generated.
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false
      
  '/plugins/generators/eclipseditto':
    get:
      tags:
      - Plugins
      summary: Meta-Information about plugin
      description: Gives meta - information about the plugin.
      responses:
        200:
          description: Successful retrieval of Plugin information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratorInfo'
        400:
          description: The request could not be completed, invalid input.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false

  '/models/{modelId}/content/{targetplatformKey}':
    get:
      tags:
      - Models
      summary: Retrieve model content for a platform
      description: Returns the complete model content including all resolved references and platform specific attributes for a given `modelId`. Platform specific attributes can be defined using mappings.  If there are no platform specific attributes available the call will return 404.  If you want to retrieve an unpublished or private model, you must login.
      operationId: RetrieveModelContentForAPlatform
      parameters:
      - name: modelId
        in: path
        description: The modelId of vorto model, e.g. com.ipso.smartobjects:Pressure:1.1.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: targetplatformKey
        in: path
        description: The key of the targetplatform, e.g. lwm2m
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successful retrieval of model content
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelContent'
        400:
          description: The request could not be completed, invalid input.
        401:
          description: The request could not be completed, invalid authentication.
        404:
          description: The request could not be completed, resource not found.
      deprecated: false

  '/models/{modelId}/file':
    get:
      tags:
      - Models
      summary: Download a model
      description: Downloads the desired model using its `modelId`. If you also require the dependencies set `includeDependencies` flag to `true`. If you want to download an unpublished or private model, you must login.
      operationId: DownloadAModel
      parameters:
      - name: modelId
        in: path
        description: The identifier of vorto model, e.g. com.bosch.bcds:XDK:2.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: includeDependencies
        in: query
        description: Optional parameter, set it to `true` if you also require the dependencies.
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/includeDependencies'
      responses:
        200:
          description: Successful download of model file
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: The request could not be completed, invalid parameters.
        401:
          description: The request could not be completed, missing authentication.
        404:
          description: The request could not be completed, model not found.
      deprecated: false

  '/attachments/{modelId}/files/{filename}':
    get:
      tags:
      - Attachments
      summary: Retrieve a specific attachment
      description: Returns a specific attachment from a model by using`modelId` and `filename`.  If you want to perform this operation for an unpublished or private model, you must login.
      operationId: RetrieveASpecificAttachment
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.bosch.bcds:XDK:2.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: filename
        in: path
        description: The name of the attached file that you want to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successfully retrieved the attachment
          headers: {}
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: The request could not be completed, resource not found.
      deprecated: false

  '/attachments/{modelId}':
    get:
      tags:
      - Attachments
      summary: List all attachments for a model
      description: Returns list of attachments related to a model identified using its `modelId`. If you want to retrieve the list of attachments for an unpublished or private model, you must login.
      operationId: ListAllAttachmentsForAModel
      parameters:
      - name: modelId
        in: path
        description: The ID of the vorto model in *namespace.name:version* format, e.g. com.bosch.bcds:XDK:2.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successfully retrieved list of attachments
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
                description: Successfully retrieved list of attachments
        404:
          description: The request could not be completed, resource not found.
      deprecated: false

  '/attachments/{modelId}/links':
    get:
      tags:
      - Attachments
      summary: Retrieve links attached to a model.
      description: Returns list of links related to a model identified using its `modelId`. If you want to retrieve the list of attachments for an unpublished or private model, you must login.
      operationId: ListAllLinksForAModel
      parameters:
      - name: modelId
        in: path
        description: The identifier of the vorto model in *namespace.name:version* format, e.g. com.bosch.bcds:XDK:2.0.0
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successfully retrieved links
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
                description: Successfully retrieved links
        404:
          description: The request could not be completed, resource not found.
      deprecated: false

components:
  schemas:
    Collaborator:
      title: Collaborator
      type: object
      properties:
        userId: 
          description: UserId of collaborator
          type: string
        providerId:
          description: The provider ID of the user.
          type: string
        subject:
          description: Purpose of this user (only for technical users)
          type: string
        roles:
          description: Roles of this user on this namespace
          type: array
          items:
            type: string
            enum: [USER, TENANT_ADMIN, MODEL_CREATOR, MODEL_PROMOTER, MODEL_REVIEWER, MODEL_PUBLISHER]
      required:
        - userId
        - providerId
        - roles
    Namespace:
      title: Namespace
      type: object
      properties:
        name: 
          description: Name of namespace
          type: string
        collaborators:
          description: collaborators of this namespace
          type: array
          items:
            $ref: '#/components/schemas/Collaborator'
    ImporterInfo:
      title: ImporterInfo
      type: object
      properties:
        key:
          description: Importer Key
          type: string
        shortDescription:
          description: Short description of the Importer
          type: string
        extensionTypes:
          description: Supported file extensions by the importer
          items:
            type: string
    UploadResult:
      title: UploadResult
      type: object
      properties:
        handleId:
          description: Upload Handle ID. If uploaded models are invalid, this field is null
          nullable: true
          type: string
        message:
          description: Short description of the outcome of the upload.
          type: string
        isValid:
          description: Identifies if uploaded models are valid or not
          type: boolean
        hasWarnings:
          type: boolean
        reports:
          type: array
          items:
            $ref: '#/components/schemas/ValidationReport'
    ValidationReport:
      title: ValidationReport
      type: object
      properties:
        model:
          $ref: '#/components/schemas/ModelInfo'
        valid:
          type: boolean
        message:
          $ref: '#/components/schemas/StatusMessage'
        unresolvedReferences:
          type: array
          items:
            $ref: '#/components/schemas/ModelId'
        validationIssues:
          type: array
          items:
            $ref: '#/components/schemas/ValidationIssue'
    ValidationIssue:
      title: ValidationIssue
      type: object
      properties:
        lineNumber:
          type: integer
        msg:
          type: string
    StatusMessage:
      title: StatusMessage
      type: object
      properties:
        message:
          type: string
        severity:
          enum:
            - ERROR
            - WARNING
            - INFO
          type: string 
    ModelInfo:
      title: ModelInfo
      type: object
      properties:
        author:
          type: string
        creationDate:
          type: string
          format: date-time
        description:
          type: string
        displayName:
          type: string
        fileName:
          type: string
        hasImage:
          type: boolean
        id:
          $ref: '#/components/schemas/ModelId'
        imported:
          type: boolean
        mappingReference:
          $ref: '#/components/schemas/ModelId'
        modificationDate:
          type: string
          format: date-time
        platformMappings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ModelId'
        referencedBy:
          type: array
          items:
            $ref: '#/components/schemas/ModelId'
        references:
          type: array
          items:
            $ref: '#/components/schemas/ModelId'
        released:
          type: boolean
        state:
          type: string
        stereotypes:
          type: array
          items:
            $ref: '#/components/schemas/Stereotype'
        targetPlatformKey:
          type: string
        type:
          $ref: '#/components/schemas/ModelType'
        vortolang:
          type: string

    ModelContent:
      title: ModelContent
      type: object
      properties:
        models:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Model'
        root:
          $ref: '#/components/schemas/ModelId'
    
    BaseModel:
      title: BaseModel
      type: object
      properties:
        targetPlatformKey:
          type: string
        stereotypes:
          type: array
          items:
            $ref: '#/components/schemas/Stereotype'
        mappingReference:
          $ref: '#/components/schemas/ModelId'
        vortolang:
          type: string
        id:
          $ref: '#/components/schemas/ModelId'
        type:
          $ref: '#/components/schemas/ModelType'
        modelType:
          type: string
        displayName:
          type: string
        description:
          type: string
        fileName:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/ModelId'
    
    Model:
      title: Model
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      oneOf:
        - $ref: '#/components/schemas/EnumModel'
        - $ref: '#/components/schemas/EntityModel'
        - $ref: '#/components/schemas/FunctionblockModel'
        - $ref: '#/components/schemas/Infomodel'
      discriminator:
        propertyName: modelType
    
    EnumModel:
      title: EnumModel
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        properties:
          literals:
            type: array
            items:
              $ref: '#/components/schemas/EnumLiteral'
              
    EnumLiteral:
      title: EnumLiteral
      type: object
      properties:
        name:
          type: string
        parent:
          $ref: '#/components/schemas/ModelId'
          
    EntityModel:
      title: EntityModel
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        properties:
          properties:
            type: array
            items:
              $ref: '#/components/schemas/ModelProperty'
              
    ModelProperty:
      title: ModelProperty
      type: object
      properties:
        targetPlatformKey:
          type: string
        stereotypes:
          type: array
          items:
            $ref: '#/components/schemas/Stereotype'
        mappingReference:
          $ref: '#/components/schemas/ModelId'
        mandatory:
          type: boolean
        name:
          type: string
        description:
          type: string
        type:
          type: object
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/IPropertyAttribute'
        primitive:
          type: boolean
        multiple:
          type: boolean

    IPropertyAttribute:
      title: IPropertyAttribute
      type: object
      properties:
        type:
          oneOf:
            - $ref: '#/components/schemas/BooleanAttributeProperty'
            - $ref: '#/components/schemas/EnumAttributeProperty'

    Constraint:
      title: Constraint
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ConstraintType'
        value:
          type: string

    BooleanAttributeProperty:
      title: BooleanAttributeProperty
      type: object
      properties:
        type:
          $ref: '#/components/schemas/BooleanAttributePropertyType'
        value:
          type: string

    EnumAttributeProperty:
      title: EnumAttributeProperty
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EnumAttributePropertyType'
        value:
          type: string

    BooleanAttributePropertyType:
      title: BooleanAttributePropertyType
      enum:
        - READABLE
        - WRITABLE
        - EVENTABLE
      type: string
      example: READABLE

    EnumAttributePropertyType:
      title: EnumAttributePropertyType
      enum:
        - MEASUREMENT_UNIT
      type: string
      example: MEASUREMENT_UNIT

    FunctionblockModel:
      title: FunctionblockModel
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        properties:
          configurationProperties:
            type: array
            items:
              $ref: '#/components/schemas/ModelProperty'
          statusProperties:
            type: array
            items:
              $ref: '#/components/schemas/ModelProperty'
          faultProperties:
            type: array
            items:
              $ref: '#/components/schemas/ModelProperty'
          events:
            type: array
            items:
              $ref: '#/components/schemas/ModelEvent'
          operations:
            type: array
            items:
              $ref: '#/components/schemas/Operation'
              
    ModelEvent:
      title: ModelEvent
      type: object
      properties:
        name:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ModelProperty'
            
    Operation:
      title: Operation
      type: object
      properties:
        targetPlatformKey:
          type: string
        stereotypes:
          type: array
          items:
            $ref: '#/components/schemas/Stereotype'
        mappingReference:
          $ref: '#/components/schemas/ModelId'
        name:
          type: string
        description:
          type: string
        result:
          $ref: '#/components/schemas/ReturnType'
        params:
          type: array
          items:
            $ref: '#/components/schemas/Param'
        breakable:
          type: boolean
          
    ReturnType:
      title: ReturnType
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ModelId'
        primitive:
          type: boolean
        multiple:
          type: boolean
          
    Param:
      title: Param
      type: object
      properties:
        targetPlatformKey:
          type: string
        stereotypes:
          type: array
          items:
            $ref: '#/components/schemas/Stereotype'
        mappingReference:
          $ref: '#/components/schemas/ModelId'
        mandatory:
          type: boolean
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/ModelId'
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        primitive:
          type: boolean
        multiple:
          type: boolean
    
    Infomodel:
      title: Infomodel
      allOf:
      - $ref: '#/components/schemas/Model'
      - type: object
        properties:
          functionblocks:
            type: array
            items:
              $ref: '#/components/schemas/ModelProperty'
    
    ConstraintType:
      title: ConstraintType
      enum:
      - MIN
      - MAX
      - STRLEN
      - REGEX
      - MIMETYPE
      - SCALING
      - DEFAULT
      - NULLABLE
      type: string
      example: MIN
    
    Stereotype:
      title: Stereotype
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: string
        name:
          type: string

    Attachment:
      title: Attachment
      type: object
      properties:
        filename:
          type: string
        modelId:
          $ref: '#/components/schemas/ModelId'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: string
        label:
          type: string

    GeneratorInfo:
      title: GeneratorInfo
      type: object
      properties:
        amountOfDownloads:
          type: integer
          format: int32
        configKeys:
          type: array
          items:
            type: string
        configTemplate:
          type: string
        creator:
          type: string
        description:
          type: string
        documentationUrl:
          type: string
        image144x144:
          type: string
        image32x32:
          type: string
        infoUrl:
          type: string
        key:
          type: string
        name:
          type: string
        tags:
          type: array
          items:
            type: string

    ModelId:
      title: ModelId
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        prettyFormat:
          type: string
        version:
          type: string

    includeDependencies:
      title: includeDependencies
      enum:
      - false
      - true
      type: string
      example: false
      
    orderBy:
      title: orderBy
      enum:
      - demo
      - infra
      - production
      type: string
      example: demo
      
    language:
      title: language
      enum:
        - python
        - arduino
        - java
        
    digitaltwin:
      title: Digital Twin Service
      enum:
        - boschiotthings
        
    ModelType:
      title: ModelType
      enum:
      - Functionblock
      - InformationModel
      - Datatype
      - Mapping
      type: string
      example: Functionblock

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: OAuth Bearer token
      description: |-
        A token issued by Github or Bosch ID
